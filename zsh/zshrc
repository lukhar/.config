### Added by Zinit's installer
if [[ ! -f $HOME/.zinit/bin/zinit.zsh ]]; then
    print -P "%F{33}▓▒░ %F{220}Installing %F{33}DHARMA%F{220} Initiative Plugin Manager (%F{33}zdharma/zinit%F{220})…%f"
    command mkdir -p "$HOME/.zinit" && command chmod g-rwX "$HOME/.zinit"
    command git clone https://github.com/zdharma/zinit "$HOME/.zinit/bin" && \
        print -P "%F{33}▓▒░ %F{34}Installation successful.%f%b" || \
        print -P "%F{160}▓▒░ The clone has failed.%f%b"
fi

source "$HOME/.zinit/bin/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit
### End of Zinit's installer chunk

zinit light "mafredri/zsh-async"
zinit light zsh-users/zsh-completions
zinit light zsh-users/zsh-autosuggestions
zinit light zdharma/fast-syntax-highlighting
zinit ice pick"async.zsh" src"pure.zsh"
zinit light sindresorhus/pure

zstyle :prompt:pure:git:stash show yes                          # turn on git stash status
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'       # Case insensitive tab completion
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"         # Colored completion (different colors for dirs/files/etc)
zstyle ':completion:*' rehash true                              # automatically find new executables in path 

# Speed up completions
zstyle ':completion:*' accept-exact '*(N)'
zstyle ':completion:*' use-cache on
zstyle ':completion:*' cache-path ~/.cache/zsh

# bigger history
HISTFILE=~/.zhistory
HISTSIZE=500000000
SAVEHIST=5000

# use bat as manpager
[ -x "$(command -v bat)" ] && export MANPAGER="sh -c 'col -bx | bat -l man -p'"

# enable editing commands in EDITOR
autoload -z edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# autosuggest settings
bindkey '^ ' autosuggest-accept                                 # use control space for autosuggest completion
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=10"
ZSH_AUTOSUGGEST_USE_ASYNC=true

# custom completion files
fpath=($HOME/.config/zsh/completions $fpath)


# fix colors on linux
[ "$HOST" = "piecyk" ] && eval `dircolors ~/.config/.dircolors`

# load aliases
[ -f $HOME/.zsh_aliases ] && source $HOME/.zsh_aliases

export PATH=$HOME/bin:$PATH
export NOTES=$HOME/documents/shared/notes
export EDITOR=`which nvim`
export LUA_PATH=/usr/share/awesome/lib

precmd() {
  if [[ -n $PYENV_SHELL ]]; then
    local version
    version=$(pyenv version-name)
    if [[ $version = system ]]; then
      unset VIRTUAL_ENV
    else
      VIRTUAL_ENV=$version
    fi
  fi
}

[ -d $HOME/.fzf ] && source ~/.fzf.zsh

# TODO move to separate file
__init_pyenv() {
  export PYENV_ROOT="$HOME/.pyenv"
  export PATH="$PYENV_ROOT/bin:$PATH"
  [ -x "$(command -v pyenv)" ] && eval "$(pyenv init --path)"
  [ -x "$(command -v pyenv)" ] && eval "$(pyenv init -)"
  [ -x "$(command -v pyenv)" ] && eval "$(pyenv virtualenv-init -)"

  # ptpython
  [ -x "$(command -v ptpython)" ] && export PTPYTHON_CONFIG_HOME=$HOME/.config/ptpython
}

__init_rbenv() {
  [ -x "$(command -v rbenv)" ] && eval "$(rbenv init -)"
}

__init_nvm() {
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && . "$NVM_DIR/bash_completion"
}

__init_hub() {
  [ -x "$(command -v hub)" ] && eval "$(hub alias -s)"
}

__init_sdk() {
  [ -d $HOME/.sdkman ] && source $HOME/.sdkman/bin/sdkman-init.sh
}

__init_pipx() {
  [ -x "$(command -v pipx)" ] && export PATH=$HOME/.local/bin:$PATH
}

__init_misc() {
  [ -f $HOME/.poetry/env ] && source $HOME/.poetry/env
}

__init_funcs=(__init_pyenv __init_rbenv __init_nvm __init_hub __init_pipx __init_sdk __init_misc)
__init_total=${#__init_funcs[*]}
__init_index=1

# Triggers an init function
# $1: the init function index to trigger
# $2: the number of seconds to wait before triggering
__run() {
  sleep ${2:0}
  echo $1
}

async_init
async_start_worker zsh -n

init_callback() {
  if [[ "$1" == "__run" ]]
  then
    # Run the current init function
    eval "$__init_funcs[$3]"

    # Trigger the next init function. This ensures the init
    # functions runs in serial.
    if (( __init_index < __init_total ))
    then
      __init_index=$(( __init_index + 1 ))
      async_job zsh __run $__init_index 0
    fi
  fi
}
async_register_callback zsh init_callback

# Delay init function triggering for 2s to make the shell starts faster.
async_job zsh __run 1 2

#vim: tabstop=2 shiftwidth=2 expandtab
